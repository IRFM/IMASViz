# -*- coding: utf-8 -*-
import sys
from functools import partial

# Form implementation generated from reading ui file 'mainwindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PySide6 import QtCore, QtGui, QtWidgets
from PySide6.QtCore import Qt, Signal, QObject, QThread
from PySide6.QtWidgets import QProgressBar, QVBoxLayout, QWidget
from PySide6.QtGui import QScreen

from imasviz.VizDataSource.QVizDataSourceFactory import QVizDataSourceFactory
from imasviz.VizPlugins.viz_Profiles.VizProfiles_plugin import VizProfiles_plugin
from imasviz.VizUtils import QVizGlobalValues, QVizGlobalOperations, QVizLogger
from imasviz.Viz_API import Viz_API


class Ui_MainWindow(object):

    def __init__(self):
        self.f = None
        self.api = None
        self.worker = None

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(615, 436)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(20, 10, 571, 381))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")

        self.label_3 = QtWidgets.QLabel(self.verticalLayoutWidget)
        self.label_3.setObjectName("label_3")
        self.verticalLayout.addWidget(self.label_3)
        self.pushButton_9 = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.pushButton_9.setObjectName("pushButton_9")
        self.verticalLayout.addWidget(self.pushButton_9)
        self.pushButton_10 = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.pushButton_10.setObjectName("pushButton_10")
        self.verticalLayout.addWidget(self.pushButton_10)

        self.label = QtWidgets.QLabel(self.verticalLayoutWidget)
        self.label.setObjectName("label")
        self.verticalLayout.addWidget(self.label)
        self.pushButton = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.pushButton.setObjectName("pushButton")
        self.verticalLayout.addWidget(self.pushButton)
        self.pushButton_2 = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.pushButton_2.setObjectName("pushButton_2")
        self.verticalLayout.addWidget(self.pushButton_2)
        self.pushButton_3 = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.pushButton_3.setObjectName("pushButton_3")
        self.verticalLayout.addWidget(self.pushButton_3)
        self.pushButton_4 = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.pushButton_4.setObjectName("pushButton_4")
        self.verticalLayout.addWidget(self.pushButton_4)
        self.label_2 = QtWidgets.QLabel(self.verticalLayoutWidget)
        self.label_2.setObjectName("label_2")
        self.verticalLayout.addWidget(self.label_2)
        self.pushButton_5 = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.pushButton_5.setObjectName("pushButton_5")
        self.verticalLayout.addWidget(self.pushButton_5)
        self.pushButton_6 = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.pushButton_6.setObjectName("pushButton_6")
        self.verticalLayout.addWidget(self.pushButton_6)

        self.label_4 = QtWidgets.QLabel(self.verticalLayoutWidget)
        self.label_4.setObjectName("label_4")
        self.verticalLayout.addWidget(self.label_4)
        self.pushButton_7 = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.pushButton_7.setObjectName("pushButton_7")
        self.verticalLayout.addWidget(self.pushButton_7)
        self.pushButton_8 = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.pushButton_8.setObjectName("pushButton_8")
        self.verticalLayout.addWidget(self.pushButton_8)
        self.label_5 = QtWidgets.QLabel(self.verticalLayoutWidget)
        self.label_5.setObjectName("label_5")
        self.verticalLayout.addWidget(self.label_5)
        self.pushButton_11 = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.pushButton_11.setObjectName("pushButton_11")
        self.verticalLayout.addWidget(self.pushButton_11)
        self.pushButton_12 = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.pushButton_12.setObjectName("pushButton_12")
        self.verticalLayout.addWidget(self.pushButton_12)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 615, 17))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.pb = ProgressBar()
        self.pb.show()
        self.verticalLayout.addWidget(self.pb)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.pushButton.clicked.connect(partial(self.call_profiles_plugin, 'core_sources', 0))
        self.pushButton_2.clicked.connect(partial(self.call_profiles_plugin, 'core_sources', 1))
        self.pushButton_3.clicked.connect(partial(self.call_profiles_plugin, 'core_sources', 2))
        self.pushButton_4.clicked.connect(partial(self.call_profiles_plugin, 'core_sources', 3))

        self.pushButton_5.clicked.connect(partial(self.call_profiles_plugin, 'core_transport', 0))
        self.pushButton_6.clicked.connect(partial(self.call_profiles_plugin, 'core_transport', 1))

        self.pushButton_9.clicked.connect(partial(self.call_profiles_plugin, 'core_profiles', 0))
        self.pushButton_10.clicked.connect(partial(self.call_profiles_plugin, 'core_profiles', 1))

        self.pushButton_7.clicked.connect(partial(self.call_profiles_plugin, 'edge_profiles', 0))
        self.pushButton_8.clicked.connect(partial(self.call_profiles_plugin, 'edge_profiles', 1))

        self.pushButton_11.clicked.connect(partial(self.call_profiles_plugin, 'equilibrium', 0))
        self.pushButton_12.clicked.connect(partial(self.call_profiles_plugin, 'equilibrium', 1))

        self.label.setStyleSheet("font:bold;")
        self.label_2.setStyleSheet("font:bold;")
        self.label_3.setStyleSheet("font:bold;")
        self.label_4.setStyleSheet("font:bold;")
        self.label_5.setStyleSheet("font:bold;")

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label.setText(_translate("MainWindow", "core_sources"))
        self.pushButton.setText(_translate("MainWindow",
                                           "Visualization of 1D data from source(i1)/global_quantities(itime) along "
                                           "coordinate1 axis"))
        self.pushButton_2.setText(_translate("MainWindow",
                                             "Visualization of 0D/1D data from source(i1)/global_quantities(itime) "
                                             "along time axis"))
        self.pushButton_3.setText(_translate("MainWindow",
                                             "Visualization of 1D data from source(i1)/profiles_1d(itime) along "
                                             "coordinate1 axis"))
        self.pushButton_4.setText(
            _translate("MainWindow", "Visualization of 0D/1D data from source(i1)/profiles_1d(itime) along time axis"))
        self.label_2.setText(_translate("MainWindow", "core_transport"))
        self.pushButton_5.setText(_translate("MainWindow",
                                             "Visualization of 1D data from model(i1)/profiles_1d(itime) along "
                                             "coordinate1 axis"))
        self.pushButton_6.setText(
            _translate("MainWindow", "Visualization of 0D/1D data from model(i1)/profiles_1d(itime) along time axis"))
        self.label_3.setText(_translate("MainWindow", "core_profiles"))
        self.pushButton_9.setText(
            _translate("MainWindow", "Visualization of 1D data from profiles_1d(itime) along coordinate1 axis"))
        self.pushButton_10.setText(
            _translate("MainWindow", "Visualization of 0D/1D data from profiles_1d(itime) along time axis"))
        self.label_4.setText(_translate("MainWindow", "edge_profiles"))
        self.pushButton_7.setText(
            _translate("MainWindow", "Visualization of 1D data from profiles_1d(itime) along coordinate1 axis"))
        self.pushButton_8.setText(
            _translate("MainWindow", "Visualization of 0D/1D data from profiles_1d(itime) along time axis"))
        self.label_5.setText(_translate("MainWindow", "equilibrium"))
        self.pushButton_11.setText(
            _translate("MainWindow", "Visualization of 1D data from time_slice(itime) along coordinate1 axis"))
        self.pushButton_12.setText(
            _translate("MainWindow", "Visualization of 0D/1D data from time_slice(itime) along time axis"))

    def disableButtonsIfRequired(self, profiles_count):
        # if profiles_count['core_sources'] != 0:
        switch = True
        switch = profiles_count['core_sources'] == 0

        # if profiles_count.get('core_sources/global_quantities/COORDINATE1') is not None:
        #     switch = profiles_count['core_sources/global_quantities/COORDINATE1'] == 0
        self.pushButton.setDisabled(switch)
        # switch = True
        # if profiles_count.get('core_sources/global_quantities/TIME') is not None:
        #     switch = profiles_count['core_sources/global_quantities/TIME'] == 0
        self.pushButton_2.setDisabled(switch)
        # switch = True
        # if profiles_count.get('core_sources/profiles_1d/COORDINATE1') is not None:
        #     switch = profiles_count['core_sources/profiles_1d/COORDINATE1'] == 0
        self.pushButton_3.setDisabled(switch)
        # switch = True
        # if profiles_count.get('core_sources/profiles_1d/TIME') is not None:
        #     switch = profiles_count['core_sources/profiles_1d/TIME'] == 0
        self.pushButton_4.setDisabled(switch)
        switch = True
        switch = profiles_count['core_transport'] == 0
        self.pushButton_5.setDisabled(switch)
        self.pushButton_6.setDisabled(switch)
        switch = True
        switch = profiles_count['core_profiles'] == 0
        self.pushButton_9.setDisabled(switch)
        self.pushButton_10.setDisabled(switch)
        switch = True
        switch = profiles_count['edge_profiles'] == 0
        self.pushButton_7.setDisabled(switch)
        self.pushButton_8.setDisabled(switch)
        switch = True
        switch = profiles_count['equilibrium'] == 0
        self.pushButton_11.setDisabled(switch)
        self.pushButton_12.setDisabled(switch)

    def initialize_data(self):
        dataSourceFactory = QVizDataSourceFactory()
        dataSource = dataSourceFactory.create(
            dataSourceName=QVizGlobalValues.IMAS_NATIVE,uri)

        if self.api is None:
            self.api = Viz_API()

        # Build the data tree view frame
        if self.f is None:
            self.f = self.api.CreateDataTree(dataSource)

    def call_profiles_plugin(self, ids_name, plugin_entry):
        if not self.api.IDSDataAlreadyFetched(dataTreeView=self.f.dataTreeView,
                                         IDSName=ids_name,
                                         occurrence=occurrence):
            self.api.LoadIDSData(self.f, ids_name, occurrence)
        self.f.show()
        vizProfiles_plugin = VizProfiles_plugin()
        vizProfiles_plugin.dataTreeView = self.f.dataTreeView
        vizProfiles_plugin.selectedTreeNode = self.f.dataTreeView.IDSRoots[ids_name]
        vizProfiles_plugin.execute(self.api, pluginEntry=plugin_entry)

    def closeProgressBar(self):
        self.pb.close()

    def launch_thread(self, data_entry, profiles_count, occurrence=0):
        self.thread = QThread()
        # Create a worker object
        self.worker = Worker(data_entry, self.f, self.api, profiles_count, occurrence)
        # Move worker to the thread
        self.worker.moveToThread(self.thread)
        # Connect signals and slots
        self.thread.started.connect(self.worker.run)
        self.worker.finished.connect(self.thread.quit)
        self.worker.finished.connect(self.worker.deleteLater)
        self.thread.finished.connect(self.thread.deleteLater)
        self.worker.finished.connect(self.closeProgressBar)
        self.worker.finished.connect(self.showUI)
        self.worker.progressBar.connect(self.updateProgressBar)
        self.worker.maxProgressBar.connect(self.pb.setMaxProgressBar)

        # Start the thread
        self.thread.start()

    def showUI(self):
        self.disableButtonsIfRequired(self.worker.profiles_count)

    def updateProgressBar(self, i, comment):
        self.statusbar.showMessage(comment)
        self.pb.pbar.setValue(i)

    # def load_data(self):
    #     self.api.LoadIDSData(self.f, 'core_sources', self.occurrence)
    #     self.api.LoadIDSData(self.f, 'core_profiles', self.occurrence)
    #     self.api.LoadIDSData(self.f, 'edge_profiles', self.occurrence)
    #     self.api.LoadIDSData(self.f, 'core_transport', self.occurrence)
    #     self.api.LoadIDSData(self.f, 'equilibrium', self.occurrence)

# worker class
class Worker(QObject):
    finished = Signal()
    call = Signal()
    progressBar = Signal(int, str)
    maxProgressBar = Signal(int)
    titleProgressBar = Signal()

    def __init__(self, data_entry, f, api, profiles_count, occurrence):
        super().__init__()
        self.data_entry = data_entry
        self.f = f
        self.profiles_count = profiles_count
        self.api = api
        self.occurrence = occurrence

    def run(self):
        """Long-running task."""
        self.check_available_data()
        self.call.emit()
        self.finished.emit()

    def check_available_data_nodes(self, api, root_node, key, profiles_count, plotAxis, str_filter):
        profiles_count[key] = 0
        children_id, children = self.api.getAll_0D_1D_Nodes(root_node,
                                                            plotAxis=plotAxis,
                                                            str_filter=str_filter)
        profiles_count[key] = len(children)

    def check_available_data(self):
        self.maxProgressBar.emit(100)
        try:
            self.progressBar.emit(5, 'Checking core_sources...')
            # n = len(self.data_entry.partial_get('core_sources', 'source(:)'))
            # print('n=', n)
            # if n != 0:
            #     root_node = self.f.dataTreeView.IDSRoots['core_sources']
            #     self.check_available_data_nodes(self.api, root_node,
            #                                     'core_sources/global_quantities/COORDINATE1',
            #                                     self.profiles_count, plotAxis='COORDINATE1',
            #                                     str_filter="global_quantities")
            #     self.check_available_data_nodes(self.api, root_node,
            #                                     'core_sources/profiles_1d/COORDINATE1',
            #                                     self.profiles_count, plotAxis='COORDINATE1',
            #                                     str_filter="profiles_1d")
            #     self.check_available_data_nodes(self.api, root_node,
            #                                     'core_sources/global_quantities/TIME',
            #                                     self.profiles_count, plotAxis='TIME',
            #                                     str_filter="global_quantities")
            #     self.check_available_data_nodes(self.api, root_node,
            #                                     'core_sources/profiles_1d/TIME',
            #                                     self.profiles_count, plotAxis='TIME',
            #                                     str_filter="profiles_1d")
            self.profiles_count['core_sources'] = len(self.data_entry.partial_get('core_sources', 'source(:)'))
        except Exception as e:
            # print(e)
            pass
        try:
            self.progressBar.emit(20, 'Checking core_transport...')
            # n = len(self.data_entry.partial_get('core_transport', 'model(:)'))
            # if n != 0:
            #     root_node = self.f.dataTreeView.IDSRoots['core_transport']
            #     self.check_available_data_nodes(self.api, root_node,
            #                                     'core_transport/profiles_1d/COORDINATE1',
            #                                     self.profiles_count, plotAxis='COORDINATE1',
            #                                     str_filter="profiles_1d")
            #     self.check_available_data_nodes(self.api, root_node,
            #                                     'core_transport/profiles_1d/TIME',
            #                                     self.profiles_count, plotAxis='TIME',
            #                                     str_filter="profiles_1d")
            self.profiles_count['core_transport'] = len(self.data_entry.partial_get('core_transport', 'model(:)'))
        except Exception:
            pass

        try:
            self.progressBar.emit(40, 'Checking core_profiles...')
            self.profiles_count['core_profiles'] = len(self.data_entry.partial_get('core_profiles', 'profiles_1d(:)'))
        except Exception:
            pass

        try:
            self.progressBar.emit(60, 'Checking edge_profiles...')
            self.profiles_count['edge_profiles'] = len(self.data_entry.partial_get('edge_profiles', 'profiles_1d(:)'))
        except Exception:
            pass

        try:
            self.progressBar.emit(80, 'Checking equilibrium...')
            self.profiles_count['equilibrium'] = len(self.data_entry.partial_get('equilibrium', 'time_slice(:)'))
        except Exception:
            pass

        self.progressBar.emit(100, 'Done')


class ProgressBar(QWidget):
    def __init__(self):
        super(ProgressBar, self).__init__()
        self.thread = None
        self.setWindowTitle('Preparing plots...')
        self.pbar = QProgressBar(self)
        self.pbar.setTextVisible(True)
        self.resize(100, 100)
        self.vbox = QVBoxLayout()
        self.vbox.addWidget(self.pbar)
        self.setLayout(self.vbox)
        self.pbar.setMinimum(0)
        self.pbar.setMaximum(100)
        self.pbar.setValue(0)

    def setMaxProgressBar(self, i):
        self.pbar.setMaximum(i)

    def setTitleProgressBar(self):
        self.pbar.setWindowTitle("Plotting...")


if __name__ == "__main__":
    import imas
    from imas import imasdef
    import logging

    # Check if necessary system variables are set
    QVizGlobalOperations.checkEnvSettings()

    logging.getLogger().setLevel(logging.INFO)
    #handler = QVizLogger()

    profiles_count = {}

    # shotNumber = 130012
    # runNumber = 4
    # userName = 'public'
    # database = 'ITER_SCENARIOS'
    uri = ''
    occurrence = 0

    data_entry = imas.DBEntry(uri, 'r')
    data_entry.open()

    supported_idss = ['core_sources', 'core_transport', 'core_profiles', 'edge_profiles', 'equilibrium']
    for ids_name in supported_idss:
        profiles_count[ids_name] = 0

    app = QtWidgets.QApplication(sys.argv)
    MainWidow = QtWidgets.QMainWindow()
    mw = Ui_MainWindow()
    mw.setupUi(MainWidow)
    mw.disableButtonsIfRequired(profiles_count)
    #handler.new_signal_emiter.new_signal.connect(mw.statusbar.showMessage)
    MainWidow.setWindowTitle("Core/edge profiles visualization found in IMAS data structures")

    qtRectangle = MainWidow.frameGeometry()
    centerPoint = QScreen().availableGeometry().center()
    qtRectangle.moveCenter(centerPoint)
    MainWidow.move(qtRectangle.topLeft())

    MainWidow.show()
    mw.statusbar.showMessage("Checking available data...")
    mw.initialize_data()
    mw.launch_thread(data_entry, profiles_count, occurrence)

    sys.exit(app.exec_())
